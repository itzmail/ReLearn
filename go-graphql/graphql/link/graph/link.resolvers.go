package graphLink

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"strconv"

	generatedLink "github.com/itzmail/hackernews/graphql/link/graph/generated"
	"github.com/itzmail/hackernews/graphql/link/graph/model"
	model1 "github.com/itzmail/hackernews/graphql/user/graph/model"
	"github.com/itzmail/hackernews/internal/links"
	"github.com/itzmail/hackernews/internal/users"
)

// CreateLink is the resolver for the createLink field.
func (r *mutationResolver) CreateLink(ctx context.Context, input model.NewLink) (*model1.Link, error) {
	user := users.GetUserByUserId(input.UserID)
	if user == nil {
		return nil, fmt.Errorf("access denied")
	}

	link := links.Link{
		Title:   input.Title,
		Address: input.Address,
	}
	link.User = user
	linkID := link.Save()
	graphqlUser := &model1.User{
		ID:   user.ID,
		Name: user.Username,
	}
	return &model1.Link{ID: strconv.FormatInt(linkID, 10), Title: link.Title, Address: link.Address, User: graphqlUser}, nil
}

// UpdateLink is the resolver for the updateLink field.
func (r *mutationResolver) UpdateLink(ctx context.Context, id string, input model.NewLink) (*model1.Link, error) {
	link, err := links.GetByID(id)
	if err != nil {
		return nil, fmt.Errorf("link not found")
	}

	body := &links.Link{
		ID:      link.ID,
		Title:   input.Title,
		Address: input.Address,
		User: &users.User{
			ID:       link.User.ID,
			Username: link.User.Username,
		},
	}

	updatedLink, err := links.Update(*body)
	if err != nil {
		return nil, err
	}
	return &model1.Link{
		ID:      updatedLink.ID,
		Title:   updatedLink.Title,
		Address: updatedLink.Address,
		User: &model1.User{
			ID:   updatedLink.User.ID,
			Name: updatedLink.User.Username,
		},
	}, nil
}

// DeleteLink is the resolver for the deleteLink field.
func (r *mutationResolver) DeleteLink(ctx context.Context, id string) (string, error) {
	res, err := links.Delete(id)
	if err != nil {
		return "", err
	}
	return res, nil
}

// Mutation returns generatedLink.MutationResolver implementation.
func (r *Resolver) Mutation() generatedLink.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
