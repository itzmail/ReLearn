package graphLink

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	generatedLink "github.com/itzmail/hackernews/graphql/link/graph/generated"
	restapi "github.com/itzmail/hackernews/graphql/user/RESTApi"
	modelUser "github.com/itzmail/hackernews/graphql/user/graph/model"
	"github.com/itzmail/hackernews/internal/links"
	"github.com/itzmail/hackernews/internal/users"
)

// Links is the resolver for the links field.
func (r *queryResolver) Links(ctx context.Context) ([]*modelUser.Link, error) {
	userDummy, err := restapi.FetchUsersDummy()
	if err != nil {
		return nil, err
	}
	for _, user := range userDummy.Users {
		fmt.Printf("ID: %d, Name: %s %s, Email: %s\n", user.ID, user.FirstName, user.LastName, user.Email)
	}

	link := links.GetAll()
	var links []*modelUser.Link
	for _, l := range link {
		links = append(links, &modelUser.Link{
			ID:      l.ID,
			Title:   l.Title,
			Address: l.Address,
			User: &modelUser.User{
				ID:   l.User.ID,
				Name: l.User.Username,
			},
		})
	}
	return links, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*modelUser.User, error) {
	user := users.GetAll()
	var users []*modelUser.User
	for _, u := range user {
		users = append(users, &modelUser.User{
			ID:   u.ID,
			Name: u.Username,
		})
	}
	return users, nil
}

// Link is the resolver for the link field.
func (r *queryResolver) Link(ctx context.Context, id string) (*modelUser.Link, error) {
	link, err := links.GetByID(id)
	if err != nil {
		return nil, fmt.Errorf("link not found")
	}
	return &modelUser.Link{
		ID:      link.ID,
		Title:   link.Title,
		Address: link.Address,
		User: &modelUser.User{
			ID:   link.User.ID,
			Name: link.User.Username,
		},
	}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*modelUser.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Query returns generatedLink.QueryResolver implementation.
func (r *Resolver) Query() generatedLink.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
